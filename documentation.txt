//
//  LocationClass.swift
//  frontend creation
//
//  Created by Serina Khanna on 8/11/20.
//  Copyright Â© 2020 Emma Yuan. All rights reserved.
//
/** DOCUMENTATION!!!
 *
 * Please assume all are default open access (public) unless otherwise specified.
 * Access Levels (for reference)
    * Open access and public access -->
        * Can be used within any source file outside or inside module.
        * Can be used from module that imports class.
        * Dif. b/t open and public is about child classes - not applicable here
    * Internal access -->
        * Entities can be used within any source file not their defining class, but not any source file outside of module.
    * File-private access -->
        * Restricts the use of an entity to its own defining source file.
        * Use to hide implementation details
    * Private access -->
        * Restricts the use of an entity to the enclosing declaration, and to extensions of that declaration that are in the same file.
        * Good to hide implementation of functionality that is used ONCE
 *
 * class Location () --> stores the information for all of the places used by the app
 *
 * Variables (all are FILE-PRIVATE - please use setter/getter methods to access)
    * var city : String --> a String that stores the city
    * var state : String --> a String that stores the state
    * var country : String --> a String that stores the country
    * var coordinates : [Double] --> a Double array ( [Double] ) that stores 2 coordinates. There should be no more than 2 elements
    * var aqi : Int --> an Int that stores the Air Quality Index (US standards).
        * Cannot be manually changed. Is first created upon initialization by fetchAQI().
        * Updated whenever resetAQI() or getAQI() or fetchAQI() is called.
 *
 * Constructors (PUBLIC)
    * init() --> Void
        * Takes 0 parameters. default values assigned for all.
    * init(city: String, state: String, country: String, coordinates: [Double])  -> Void
        * Takes the city, state, country, and coordinates parameters.
        * Calls fetchAQI() to determine the aqi value.
    * EXAMPLE:
        * var a = Location()
        * var a = Location(city: "Austin", state: "Texas", country: "USA", coordinates: [-97.760002, 30.3542])
 *
 * Methods (General) (FILE-PRIVATE)
    * FILE-PRIVATE fetchAQI() -> Void
        * If you want to change the aqi, call resetAQI(). If you want to reset + get aqi, then call getAQI().
        * Calls fetchSmogSpecifiedCityInput() to recieve JSON information, then manually sorts through the information and searches for the aqi
    * FILE-PRIVATE fetchSmogSpecifiedCityInput(city: String, state: String, country: String, completion: @escaping (_ result: String) -> Void)
        * Fetches the JSON information from API and returns as a String
        * Uses completion handler, so must use this format to get result:
            * fetchSmogSpecifiedCityInput(city: self.city, state: self.state, country: self.country) {
                (result: String) in
                *insert code here*
 *
 * Methods (Getter) (PUBLIC)
    * getCity() -> String
        * Returns city
    * getState() -> String
        * Returns state
    * getCountry() -> String
        * Returns country
    * getCoordinates() -> [Double]
        * Returns coordinates as a [Double]
    * getAQI() -> Int
        * Public method! Please use this one instead of fetchAPI()
        * Calls resetAQI() and then returns newly found aqi as an Int
 *
 * Methods (Setter) (PUBLIC)
    * setCity(city : String) -> Void
        * Sets the new city
    * setState(state : String) -> Void
        * Sets the new state
    * setCountry(country : String) -> Void
        * Sets the new country
    * setCoordinates( coordinates : [Double] ) -> Void
        * Sets the new coordinates
    * resetAQI() -> Void
        * Public
        * Does not take in any parameters
        * Instead calls the API function to reset the aqi
        * If want to reset AQI whenever user needs to, please use the getAQI(), since it returns value and automatically calls resetAQI()
 */
